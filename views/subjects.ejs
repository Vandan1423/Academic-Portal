<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Subjects & Resources</title>
    <link rel="stylesheet" href="/navbar.css">
    <link rel="stylesheet" href="/subjects.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <%- include("partials/navbar") %>
    <div class="content">
        <h1><i class="fas fa-book-open"></i> Subjects & Learning Resources</h1>
        <p>Access study materials, notes, and resources for all your subjects.</p>

        <!-- Search and Filter -->
        <div class="search-section">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search subjects or resources...">
                <i class="fas fa-search"></i>
            </div>
            <div class="filter-options">
                <select id="subjectFilter">
                    <option value="">All Subjects</option>
                    <option value="Mathematics">Mathematics</option>
                    <option value="Physics">Physics</option>
                    <option value="Chemistry">Chemistry</option>
                    <option value="English">English</option>
                    <option value="Computer Science">Computer Science</option>
                </select>
                <select id="typeFilter">
                    <option value="">All Types</option>
                    <option value="Notes">Notes</option>
                    <option value="Assignment">Assignment</option>
                    <option value="Study Guide">Study Guide</option>
                    <option value="Video">Video</option>
                    <option value="Practice Test">Practice Test</option>
                </select>
            </div>
        </div>

        <!-- Subjects Grid -->
        <div class="subjects-grid" id="subjectsGrid">
            <!-- Subjects will be dynamically generated here -->
        </div>

        <!-- Recent Resources -->
        <div class="recent-resources">
            <h2><i class="fas fa-clock"></i> Recent Resources</h2>
            <div class="resources-list" id="recentResources">
                <!-- Recent resources will be displayed here -->
            </div>
        </div>

        <!-- Popular Resources -->
        <div class="popular-resources">
            <h2><i class="fas fa-star"></i> Popular Resources</h2>
            <div class="resources-list" id="popularResources">
                <!-- Popular resources will be displayed here -->
            </div>
        </div>
    </div>

    <script>
        let facultyResources = [];
        let subjects = [
            {
                name: "Mathematics",
                icon: "fas fa-calculator",
                color: "#e74c3c",
                description: "Advanced mathematical concepts and problem-solving techniques"
            },
            {
                name: "Physics",
                icon: "fas fa-atom",
                color: "#3498db",
                description: "Understanding the fundamental laws of nature"
            },
            {
                name: "Chemistry",
                icon: "fas fa-flask",
                color: "#2ecc71",
                description: "Study of matter, its properties, and transformations"
            },
            {
                name: "English",
                icon: "fas fa-book",
                color: "#f39c12",
                description: "Language arts, literature, and communication skills"
            },
            {
                name: "Computer Science",
                icon: "fas fa-laptop-code",
                color: "#9b59b6",
                description: "Programming, algorithms, and computational thinking"
            },
            {
                name: "Biology",
                icon: "fas fa-dna",
                color: "#1abc9c",
                description: "Study of living organisms and life processes"
            }
        ];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadFacultyResources();
            renderSubjects();
            renderRecentResources();
            renderPopularResources();
            setupSearchAndFilter();
        });

        // Load faculty resources
        function loadFacultyResources() {
            // Try to get faculty resources from shared storage
            let storedResources = localStorage.getItem('sharedResources');
            if (!storedResources) {
                // Fallback to faculty-specific storage
                storedResources = localStorage.getItem('facultyResources');
            }
            
            if (storedResources) {
                facultyResources = JSON.parse(storedResources);
            } else {
                // Sample resources if none exist
                facultyResources = [
                    {
                        id: 1,
                        title: "Calculus Fundamentals",
                        subject: "Mathematics",
                        type: "Notes",
                        description: "Comprehensive notes on calculus basics",
                        uploadDate: "2024-01-15",
                        downloads: 45,
                        fileSize: "2.3 MB",
                        teacher: "Dr. Smith"
                    },
                    {
                        id: 2,
                        title: "Physics Lab Manual",
                        subject: "Physics",
                        type: "Study Guide",
                        description: "Complete lab manual for physics experiments",
                        uploadDate: "2024-01-10",
                        downloads: 32,
                        fileSize: "1.8 MB",
                        teacher: "Prof. Johnson"
                    },
                    {
                        id: 3,
                        title: "Chemistry Practice Problems",
                        subject: "Chemistry",
                        type: "Practice Test",
                        description: "Set of practice problems with solutions",
                        uploadDate: "2024-01-12",
                        downloads: 28,
                        fileSize: "3.1 MB",
                        teacher: "Dr. Brown"
                    }
                ];
            }
        }

        // Render subjects
        function renderSubjects() {
            const subjectsGrid = document.getElementById('subjectsGrid');
            
            let html = '';
            subjects.forEach(subject => {
                const subjectResources = facultyResources.filter(r => r.subject === subject.name);
                const resourceCount = subjectResources.length;
                
                html += `
                    <div class="subject-card" onclick="showSubjectResources('${subject.name}')">
                        <div class="subject-icon" style="background-color: ${subject.color}">
                            <i class="${subject.icon}"></i>
                        </div>
                        <div class="subject-info">
                            <h3>${subject.name}</h3>
                            <p>${subject.description}</p>
                            <div class="resource-count">
                                <i class="fas fa-file-alt"></i> ${resourceCount} resources available
                            </div>
                        </div>
                        <div class="subject-arrow">
                            <i class="fas fa-chevron-right"></i>
                        </div>
                    </div>
                `;
            });
            
            subjectsGrid.innerHTML = html;
        }

        // Render recent resources
        function renderRecentResources() {
            const recentContainer = document.getElementById('recentResources');
            const recentResources = facultyResources
                .sort((a, b) => new Date(b.uploadDate) - new Date(a.uploadDate))
                .slice(0, 5);
            
            if (recentResources.length === 0) {
                recentContainer.innerHTML = '<p class="no-resources">No recent resources available.</p>';
                return;
            }
            
            let html = '';
            recentResources.forEach(resource => {
                html += `
                    <div class="resource-item">
                        <div class="resource-icon">
                            <i class="fas fa-${getResourceIcon(resource.type)}"></i>
                        </div>
                        <div class="resource-info">
                            <h4>${resource.title}</h4>
                            <p>${resource.description}</p>
                            <div class="resource-meta">
                                <span><i class="fas fa-user"></i> ${resource.teacher}</span>
                                <span><i class="fas fa-calendar"></i> ${resource.uploadDate}</span>
                                <span><i class="fas fa-download"></i> ${resource.downloads}</span>
                            </div>
                        </div>
                        <div class="resource-actions">
                            <button class="btn btn-small btn-primary" onclick="downloadResource(${resource.id})">
                                <i class="fas fa-download"></i> Download
                            </button>
                        </div>
                    </div>
                `;
            });
            
            recentContainer.innerHTML = html;
        }

        // Render popular resources
        function renderPopularResources() {
            const popularContainer = document.getElementById('popularResources');
            const popularResources = facultyResources
                .sort((a, b) => b.downloads - a.downloads)
                .slice(0, 5);
            
            if (popularResources.length === 0) {
                popularContainer.innerHTML = '<p class="no-resources">No popular resources available.</p>';
                return;
            }
            
            let html = '';
            popularResources.forEach(resource => {
                html += `
                    <div class="resource-item popular">
                        <div class="resource-icon">
                            <i class="fas fa-${getResourceIcon(resource.type)}"></i>
                        </div>
                        <div class="resource-info">
                            <h4>${resource.title}</h4>
                            <p>${resource.description}</p>
                            <div class="resource-meta">
                                <span><i class="fas fa-user"></i> ${resource.teacher}</span>
                                <span><i class="fas fa-star"></i> ${resource.downloads} downloads</span>
                                <span><i class="fas fa-file"></i> ${resource.fileSize}</span>
                            </div>
                        </div>
                        <div class="resource-actions">
                            <button class="btn btn-small btn-primary" onclick="downloadResource(${resource.id})">
                                <i class="fas fa-download"></i> Download
                            </button>
                        </div>
                    </div>
                `;
            });
            
            popularContainer.innerHTML = html;
        }

        // Get resource icon based on type
        function getResourceIcon(type) {
            const icons = {
                'Notes': 'file-alt',
                'Assignment': 'tasks',
                'Study Guide': 'book',
                'Video': 'video',
                'Practice Test': 'question-circle'
            };
            return icons[type] || 'file';
        }

        // Show subject resources
        function showSubjectResources(subjectName) {
            const subjectResources = facultyResources.filter(r => r.subject === subjectName);
            
            if (subjectResources.length === 0) {
                alert(`No resources available for ${subjectName} yet.`);
                return;
            }
            
            // Create a modal to show resources
            const modal = document.createElement('div');
            modal.className = 'resource-modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>${subjectName} Resources</h2>
                        <span class="close" onclick="closeResourceModal()">&times;</span>
                    </div>
                    <div class="modal-body">
                        ${subjectResources.map(resource => `
                            <div class="resource-item">
                                <div class="resource-icon">
                                    <i class="fas fa-${getResourceIcon(resource.type)}"></i>
                                </div>
                                <div class="resource-info">
                                    <h4>${resource.title}</h4>
                                    <p>${resource.description}</p>
                                    <div class="resource-meta">
                                        <span><i class="fas fa-user"></i> ${resource.teacher}</span>
                                        <span><i class="fas fa-calendar"></i> ${resource.uploadDate}</span>
                                        <span><i class="fas fa-download"></i> ${resource.downloads}</span>
                                    </div>
                                </div>
                                <div class="resource-actions">
                                    <button class="btn btn-small btn-primary" onclick="downloadResource(${resource.id})">
                                        <i class="fas fa-download"></i> Download
                                    </button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }

        // Close resource modal
        function closeResourceModal() {
            const modal = document.querySelector('.resource-modal');
            if (modal) {
                modal.remove();
            }
        }

        // Download resource
        function downloadResource(resourceId) {
            const resource = facultyResources.find(r => r.id === resourceId);
            if (resource) {
                // Increment download count
                resource.downloads++;
                localStorage.setItem('sharedResources', JSON.stringify(facultyResources));
                
                // Simulate download
                showNotification(`Downloading ${resource.title}...`, 'success');
                
                // In a real app, this would trigger an actual file download
                setTimeout(() => {
                    showNotification(`${resource.title} downloaded successfully!`, 'success');
                }, 2000);
            }
        }

        // Setup search and filter
        function setupSearchAndFilter() {
            const searchInput = document.getElementById('searchInput');
            const subjectFilter = document.getElementById('subjectFilter');
            const typeFilter = document.getElementById('typeFilter');
            
            function filterResources() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedSubject = subjectFilter.value;
                const selectedType = typeFilter.value;
                
                // Filter resources based on search and filters
                const filteredResources = facultyResources.filter(resource => {
                    const matchesSearch = resource.title.toLowerCase().includes(searchTerm) ||
                                         resource.description.toLowerCase().includes(searchTerm) ||
                                         resource.subject.toLowerCase().includes(searchTerm);
                    const matchesSubject = !selectedSubject || resource.subject === selectedSubject;
                    const matchesType = !selectedType || resource.type === selectedType;
                    
                    return matchesSearch && matchesSubject && matchesType;
                });
                
                // Update displays
                renderFilteredResources(filteredResources);
            }
            
            searchInput.addEventListener('input', filterResources);
            subjectFilter.addEventListener('change', filterResources);
            typeFilter.addEventListener('change', filterResources);
        }

        // Render filtered resources
        function renderFilteredResources(filteredResources) {
            // This would update the resource displays based on filters
            // For now, just show a count
            if (filteredResources.length > 0) {
                showNotification(`Found ${filteredResources.length} resources`, 'info');
            }
        }

        // Show notification
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'info' ? 'info-circle' : 'exclamation-circle'}"></i>
                ${message}
            `;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            const modal = document.querySelector('.resource-modal');
            if (event.target === modal) {
                closeResourceModal();
            }
        });
    </script>
</body>
</html>